<!-- Note the variable included in the {} along with the data type.
      This will be bound in the code behind to the Parameter of the 
      same name.
-->
@page "/productCRUD/{productID:int?}"

<PageTitle>Product CRUD</PageTitle>

@using DBInteractionSystem.Entities

<h3>Product Database Fundamental Operations</h3>
<h4>... example of maintaining a database record</h4>

<!-- Using the Edit Form allows us to include a Validator that will highlight
     our controls when they do not meet our data requirements.  We can check the 
     data in the code behind and then specify custom messages to be displayed directly
     with the controls.  
-->
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />

<div class="row">
    <div class="offset-1 col-md-4">

        <label for="productID" class="form-label">ProductID : </label>
        <InputNumber @bind-Value="CurrentProduct.ProductID"
                     class="form-control" id="productID" readonly
                     style="width: 75px" />
        <br /><br />

        <label for="productName" class="form-label">Product Name : </label>
        <InputText @bind-Value="CurrentProduct.ProductName"
                     class="form-control" id="productName" 
                     placeholder="Product Name" />
        <!-- This following line extracts the related message from the MessageStore in the code behind 
             Note that the syntax in the For attribute references the same thing as the bind-Value
             of the control that it is intended for.  This pattern may be repeated for all controls.
        -->
        <ValidationMessage For="@(() => CurrentProduct.ProductName)" />
        <br /><br />

        <label for="categoryID" class="form-label">Category : </label>
        <InputSelect @bind-Value="CurrentProduct.CategoryID"
                   class="form-control" id="categoryID">
            <option value="0">Select a Category</option>
               @foreach(Category category in categories)
               {
                    <option value="@category.CategoryID"
                            selected="@(category.CategoryID == CurrentProduct.CategoryID)">
                                    @category.CategoryName</option>
               }
        </InputSelect>
        <ValidationMessage For="@(() => CurrentProduct.CategoryID)" />
        <br /><br />

        <label for="supplierID" class="form-label">Supplier : </label>
        <InputSelect @bind-Value="CurrentProduct.SupplierID"
                     class="form-control" id="supplierID">
            <option value="0">Select a Supplier</option>
            @foreach (Supplier supplier in suppliers)
            {
                <option value="@supplier.SupplierID"
                        selected="@(supplier.SupplierID == CurrentProduct.SupplierID)">
                    @supplier.CompanyName
                </option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CurrentProduct.SupplierID)" />
        <br /><br />

       @*  <label for="enterPartial" class="form-label">Click to Activate Textbox : </label>
            <InputCheckbox id="enterPartial" @bind-Value="activateText" class="form-control">                          
            </InputCheckbox>
            <br /><br /> *@
   
        @* <label for="supplierEntry" class="form-label">Partial Supplier Name : </label>
            @if (activateText)
            {
                <InputText @bind-Value="supplierText"
                class="form-control" id="supplierEntry"
                placeholder="Description of Product" />
            }
            else
            {
                <InputText @bind-Value="supplierText"
                           class="form-control" id="supplierEntry"
                           placeholder="Description of Product" readonly />
            }
            <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
                <br /><br /> *@
            
    </div>

    <div class="offset-1 col-md-4">

        <label for="quantityPerUnit" class="form-label">Quantity Per Unit : </label>
        <InputText @bind-Value="CurrentProduct.QuantityPerUnit"
                   class="form-control" id="quantityPerUnit"
                   placeholder="Description of Product" />
        <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
        <br /><br />

        <label for="unitPrice" class="form-label">Unit Price : </label>
        <InputNumber @bind-Value="CurrentProduct.UnitPrice"
                     class="form-control" id="unitPrice" 
                     style="width: 75px" />
        <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />
        <br /><br />

        <label for="minimumOrderQuantity" class="form-label">Minimum Order Quantity : </label>
        <InputNumber @bind-Value="CurrentProduct.MinimumOrderQuantity"
                     class="form-control" id="minimumOrderQuantity" 
                     style="width: 75px" />
        <ValidationMessage For="@(() => CurrentProduct.MinimumOrderQuantity)" />
        <br /><br />

        <label for="unitsOnOrder" class="form-label">Units On Order : </label>
        <InputNumber @bind-Value="CurrentProduct.UnitsOnOrder"
                     class="form-control" id="unitsOnOrder" 
                     style="width: 75px" />
        <ValidationMessage For="@(() => CurrentProduct.UnitsOnOrder)" />
        <br /><br />

    </div>
</div>
<div class="row">
    <div class="col-md-12 text-center">
        <button type="submit" class="btn btn-outline-primary rounded-pill"
                style="width: 200px" @onclick="OnCreate">
            Create
        </button>
        &nbsp;&nbsp;
        <button type="submit" class="btn btn-outline-secondary rounded-pill"
                style="width: 200px" @onclick="OnUpdate">
            Update
        </button>
        &nbsp;&nbsp;
        <button type="submit" class="btn btn-outline-secondary rounded-pill"
                style="width: 200px" @onclick="OnDiscontinue">
            Discontinue
        </button>
        &nbsp;&nbsp;
        <button type="submit" class="btn btn-outline-secondary rounded-pill"
                style="width: 200px" @onclick="OnDelete">
            Delete
        </button>
        &nbsp;&nbsp;
        <button type="submit" class="btn btn-outline-secondary rounded-pill"
                style="width: 200px" @onclick="OnClear">
            Clear
        </button>
        &nbsp;&nbsp;
        <button type="submit" class="btn btn-outline-secondary rounded-pill"
                style="width: 200px" @onclick="GoToCategoryProducts">
            Category Products
        </button>
        &nbsp;&nbsp;
    </div>
</div>
    <br /><br />

    <!-- The validation summary may be placed anywhere in the Edit Form.  It will redisplay
         all of the messages from the individual controls that hold invalid data.
    -->
    <ValidationSummary />
</EditForm>









@if (feedback.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedback</p>
    </div>
}

@if (errorMessages.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following errors:</p>
        <ul>
            @foreach (string error in errorMessages)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}





