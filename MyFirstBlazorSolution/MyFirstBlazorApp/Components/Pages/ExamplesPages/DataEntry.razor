@page "/dataentry"

<PageTitle>Data Entry</PageTitle>

<h3>DataEntry</h3>

<div class="row"> <!-- Bootstrap to turn screen into 12 blocks horizontally -->
    <div class="offset-1 col-md-10"> <!-- Bootstrap to create an space 10 of the blocks wide starting one 
                                            block from the left hand side of the screen-->
        <blockquote style="background-color:gainsboro;">
            <p>
                This component will demonstrate how your page can handle validation of data input,
                showing validation messages when you have a number of controls for data entry. This
                component will validate the locate controls and create any validation messages for
                invalid data. The messages can be collected using various techniques such as: List or
                Dictionary.
            </p>
            <p>
                This page will input data for an instance of the Employment class. This demo will
                use the Employment class from the OOPs review. The SupervisoryLevel enum
                class will also be brought into this project. One could have included the entire
                class library as part of this solution instead of bringing in individual classes.
            </p>
            <p>
                One could have included an entire project and used the classes from within, but we have 
                already created a class library for this project and so will use it instead.  If at all 
                possible, it is best practice to include the various projects in the same solution, 
                but this will not always be possible as you are not always creating all of the projects.
            </p>
        </blockquote>
    </div>
</div>

<br />

<!-- The following fieldset contains the controls that will collect the information 
     needed to create an Employment class instance.  Note that each has been placed
     in its own div with two embedded divs to hold the label and control respectively.
     This will help with alignment of the controls.
-->
<fieldset>
    <legend>Employment Data</legend>

    <div class="row">
        <div class="col-md-2">
            <label for="title">Position Title : </label>
        </div>
        <div class="col-md-2">
            <input type="text" id="title" @bind="employmentTitle" 
                placeholder="Enter position title" />
        </div>
    </div>
    
    <br />

    <div class="row">
        <div class="col-md-2">
            <label for="startDate">Start Date : </label>
        </div>
        <div class="col-md-2">
            <input type="date" id="startDate" @bind="startDate" />
        </div>
    </div>

    <br />

    <div class="row">
        <div class="col-md-2">
            <label for="years">Years in Position : </label>
        </div>
        <div class="col-md-2">
            <input type="number" id="years" @bind="employedYears" 
                step="0.1" min="0" style="width:75px;"
                placeholder="ex: 3.4"/>
        </div>
    </div>

    <br />

    <div class="row">
        <div class="col-md-2">
            <label for="level">Select SuperVisory Level : </label>
        </div>
        <div class="col-md-2">
            <select @bind="employmentLevel">
                <option value="None">Select...</option>
                <!-- Remember that the GetValues() method will return all of the
                     defined values in an enumeration.
                -->
                @foreach (var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    <!-- When the only information available is a display string
                         it may be used for both the display tesxt and the value
                    -->
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    </div>

    <br />

    <!-- Note that all of the CSS classes you see below, as well as those above
         are part of the Bootstrap add-on.  If you wish to delve into Bootstrap
         more you may take a look at https://www.w3schools.com/bootstrap/default.asp
         for a decent starter tutorial.
    -->
    <div class="row">
        <div class="col-md-12 text-center">

            <button type="submit" class="btn btn-outline-primary rounded-pill"
                    @onclick="CollectEmploymentInfo">
                Submit Employment Info
                </button>
            &nbsp;&nbsp;

            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    @onclick="Clear" style="width:200px;">
                Clear
            </button>
            &nbsp;&nbsp;

            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    @onclick="GoToReport">
                Go To Report Via Method Call
            </button>
            &nbsp;&nbsp;

            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    >
                <a href="report">Go To Report Via Anchor</a>
            </button>
            &nbsp;&nbsp;

        </div>
    </div>

</fieldset>

<br />
<br />

@if (feedback.Length > 0)
{
    <div class="alert alert-info">
        <!-- Bootstrap for div colouring -->
        <p>@feedback</p>
    </div>
}

<!-- Do the following only if there are error messages.  Style choice of where to put this on the page -->
@if (errorMessages.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues :</p>
        <ul>
            <!-- This following way of accessing the items in the Dictionary allows
                us to directly display the contents of the inner values List collection.

                "at"foreach (string error in errorMessages.Values)
                {
                    <li>"at"error</li>
                }
            -->
            <!-- This is a more explicit way of remembering what the data type is that
                you are dealing with inside the Dictionary.

            "at"foreach(KeyValuePair<string,string> error in errorMessages)
            {
                <li>"at"error.Value</li>
            }
             -->
            <!-- This following is probably the "cleanest" way to access the Dictionary
                 key/value pairs with the most flexibility but the easiest amount of code
                 to write.  However, it requires you to keep in mind what it is that you
                 are accessing.  The following will display each text detailed error
                 message as an unordered list item.
            -->
            @foreach (var error in errorMessages)
            {
                <li>@error.Value</li>
            }

        </ul>
    </div>
}



@code {
    // moved all code to a separate physical file called DataEntry.razor.cs
}
